<?php

/**
 * This is the model base class for the table "transaction".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Transaction".
 *
 * Columns in table "transaction" available as properties of the model,
 * followed by relations of table "transaction" available as properties of the model.
 *
 * @property integer $transaction_id
 * @property integer $user_id
 * @property string $email
 * @property string $twitter_screen_name
 * @property string $payment_gateway_id
 * @property string $amount
 * @property integer $campaign_id
 * @property string $created_date
 * @property integer $payment_status
 * @property integer $is_delete
 *
 * @property UserDetail $user
 */
abstract class BaseTransaction extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'transaction';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Transaction|Transactions', $n);
	}

	public static function representingColumn() {
		return 'email';
	}

	public function rules() {
		return array(
			array('user_id, email, twitter_screen_name, payment_gateway_id, amount, campaign_id, created_date', 'required'),
			array('user_id, campaign_id, payment_status, is_delete', 'numerical', 'integerOnly'=>true),
			array('email', 'length', 'max'=>100),
			array('twitter_screen_name, payment_gateway_id, amount', 'length', 'max'=>255),
			array('payment_status, is_delete', 'default', 'setOnEmpty' => true, 'value' => null),
			array('transaction_id, user_id, email, twitter_screen_name, payment_gateway_id, amount, campaign_id, created_date, payment_status, is_delete', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'user' => array(self::BELONGS_TO, 'UserDetail', 'user_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'transaction_id' => Yii::t('app', 'Transaction'),
			'user_id' => null,
			'email' => Yii::t('app', 'Email'),
			'twitter_screen_name' => Yii::t('app', 'Twitter Screen Name'),
			'payment_gateway_id' => Yii::t('app', 'Payment Gateway'),
			'amount' => Yii::t('app', 'Amount'),
			'campaign_id' => Yii::t('app', 'Campaign'),
			'created_date' => Yii::t('app', 'Created Date'),
			'payment_status' => Yii::t('app', 'Payment Status'),
			'is_delete' => Yii::t('app', 'Is Delete'),
			'user' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('transaction_id', $this->transaction_id);
		$criteria->compare('user_id', $this->user_id);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('twitter_screen_name', $this->twitter_screen_name, true);
		$criteria->compare('payment_gateway_id', $this->payment_gateway_id, true);
		$criteria->compare('amount', $this->amount, true);
		$criteria->compare('campaign_id', $this->campaign_id);
		$criteria->compare('created_date', $this->created_date, true);
		$criteria->compare('payment_status', $this->payment_status);
		$criteria->compare('is_delete', $this->is_delete);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}