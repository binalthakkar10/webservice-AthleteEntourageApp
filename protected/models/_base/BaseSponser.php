<?php

/**
 * This is the model base class for the table "sponser".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Sponser".
 *
 * Columns in table "sponser" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $sponser_id
 * @property string $username
 * @property string $iphone_image
 * @property string $ipad_image
 * @property string $fb_screen_name
 * @property string $twitter_screen_name
 * @property integer $total_twitt
 * @property integer $total_retwitt
 * @property integer $fb_likes
 * @property integer $fb_friends
 * @property integer $facebook_followers
 * @property integer $twitter_followers
 * @property double $impact_score
 * @property string $team
 * @property string $position
 * @property integer $flag
 *
 */
abstract class BaseSponser extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'sponser';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Sponser|Sponsers', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, iphone_image, ipad_image, fb_screen_name, twitter_screen_name, total_twitt, total_retwitt, fb_likes, fb_friends, facebook_followers, twitter_followers, impact_score, team, position', 'required'),
			array('total_twitt, total_retwitt, fb_likes, fb_friends, facebook_followers, twitter_followers, flag', 'numerical', 'integerOnly'=>true),
			array('impact_score', 'numerical'),
			array('username, iphone_image, ipad_image, fb_screen_name, twitter_screen_name, team, position', 'length', 'max'=>100),
			array('flag', 'default', 'setOnEmpty' => true, 'value' => null),
			array('sponser_id, username, iphone_image, ipad_image, fb_screen_name, twitter_screen_name, total_twitt, total_retwitt, fb_likes, fb_friends, facebook_followers, twitter_followers, impact_score, team, position, flag', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'sponser_id' => Yii::t('app', 'Sponser'),
			'username' => Yii::t('app', 'Username'),
			'iphone_image' => Yii::t('app', 'Iphone Image'),
			'ipad_image' => Yii::t('app', 'Ipad Image'),
			'fb_screen_name' => Yii::t('app', 'Fb Screen Name'),
			'twitter_screen_name' => Yii::t('app', 'Twitter Screen Name'),
			'total_twitt' => Yii::t('app', 'Total Twitt'),
			'total_retwitt' => Yii::t('app', 'Total Retwitt'),
			'fb_likes' => Yii::t('app', 'Fb Likes'),
			'fb_friends' => Yii::t('app', 'Fb Friends'),
			'facebook_followers' => Yii::t('app', 'Facebook Followers'),
			'twitter_followers' => Yii::t('app', 'Twitter Followers'),
			'impact_score' => Yii::t('app', 'Impact Score'),
			'team' => Yii::t('app', 'Team'),
			'position' => Yii::t('app', 'Position'),
			'flag' => Yii::t('app', 'Flag'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('sponser_id', $this->sponser_id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('iphone_image', $this->iphone_image, true);
		$criteria->compare('ipad_image', $this->ipad_image, true);
		$criteria->compare('fb_screen_name', $this->fb_screen_name, true);
		$criteria->compare('twitter_screen_name', $this->twitter_screen_name, true);
		$criteria->compare('total_twitt', $this->total_twitt);
		$criteria->compare('total_retwitt', $this->total_retwitt);
		$criteria->compare('fb_likes', $this->fb_likes);
		$criteria->compare('fb_friends', $this->fb_friends);
		$criteria->compare('facebook_followers', $this->facebook_followers);
		$criteria->compare('twitter_followers', $this->twitter_followers);
		$criteria->compare('impact_score', $this->impact_score);
		$criteria->compare('team', $this->team, true);
		$criteria->compare('position', $this->position, true);
		$criteria->compare('flag', $this->flag);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}